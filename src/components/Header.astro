---
/**
 * Header Component
 * Sticky header with scroll-based styling
 * - Transparent with white text/logo on top
 * - White background with dark text/colored logo when scrolled
 */
import headerData from '../content/settings/header.json';

const navigation = headerData.navigation || [];
---

<header id="main-header" class="fixed top-0 left-0 right-0 z-50 transition-all duration-300">
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-20">
      <!-- Logo -->
      <a href="/" class="flex items-center justify-center relative" style={`height: ${Math.max(headerData.logoHeight, headerData.logoWhiteHeight)}px; min-width: 150px;`}>
        <img 
          id="logo-white" 
          src={headerData.logoWhite} 
          alt={headerData.logoAlt} 
          style={`height: ${headerData.logoWhiteHeight}px`}
          class="w-auto object-contain transition-opacity duration-300 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
        />
        <img 
          id="logo-color" 
          src={headerData.logo} 
          alt={headerData.logoAlt} 
          style={`height: ${headerData.logoHeight}px`}
          class="w-auto object-contain transition-opacity duration-300 opacity-0 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
        />
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navigation.map((item: any) => (
          item.submenu ? (
            <div class="relative group">
              <button class="nav-link font-medium transition-colors flex items-center gap-1">
                {item.label}
                <svg class="w-4 h-4 transition-transform group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
              <!-- Dropdown Menu -->
              <div class="absolute left-0 mt-2 w-48 bg-white rounded-lg shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                <div class="py-2">
                  {item.submenu.map((subitem: any) => (
                    <a href={subitem.link} class="block px-4 py-2 text-gray-700 hover:bg-primary-50 hover:text-primary transition-colors">
                      {subitem.label}
                    </a>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <a href={item.link} class="nav-link font-medium transition-colors">
              {item.label}
            </a>
          )
        ))}
        
        <!-- CTA Button -->
        <a 
          href={headerData.ctaLink} 
          class={`cta-button cta-button-${headerData.ctaColor} px-6 py-2 rounded-full font-bold transition-all`}
        >
          {headerData.ctaText}
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <button 
        id="mobile-menu-button"
        class="md:hidden p-2 rounded-lg transition-colors"
        aria-label="Toggle menu"
      >
        <svg class="w-6 h-6 menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </nav>

  <!-- Mobile Menu -->
  <div 
    id="mobile-menu" 
    class="md:hidden hidden mobile-menu-bg"
  >
    <div class="px-4 pt-2 pb-6 space-y-3">
      {navigation.map((item: any, index: number) => (
        item.submenu ? (
          <div>
            <button 
              class="w-full text-left px-4 py-3 rounded-lg nav-link-mobile font-medium transition-colors flex items-center justify-between mobile-submenu-toggle"
              data-submenu={`submenu-${index}`}
            >
              {item.label}
              <svg class="w-4 h-4 transition-transform submenu-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            <div class="hidden pl-4 space-y-2 mt-2" id={`submenu-${index}`}>
              {item.submenu.map((subitem: any) => (
                <a href={subitem.link} class="block px-4 py-2 rounded-lg nav-link-mobile text-sm transition-colors">
                  {subitem.label}
                </a>
              ))}
            </div>
          </div>
        ) : (
          <a href={item.link} class="block px-4 py-3 rounded-lg nav-link-mobile font-medium transition-colors">
            {item.label}
          </a>
        )
      ))}
      <a 
        href={headerData.ctaLink} 
        class={`block px-6 py-3 rounded-full font-bold text-center cta-button-mobile cta-button-mobile-${headerData.ctaColor} transition-all mt-4`}
      >
        {headerData.ctaText}
      </a>
    </div>
  </div>
</header>

<style>
  /* Initial state - transparent with white text */
  #main-header {
    background-color: transparent;
  }
  
  .nav-link {
    color: white;
  }
  
  .nav-link:hover {
    color: rgba(255, 255, 255, 0.8);
  }
  
  /* CTA Button - Primary */
  .cta-button-primary {
    background-color: #1991B9;
    color: white;
    border: none;
  }
  
  .cta-button-primary:hover {
    background-color: #147494;
    transform: scale(1.05);
  }
  
  /* CTA Button - Secondary */
  .cta-button-secondary {
    background-color: #111D4A;
    color: white;
    border: none;
  }
  
  .cta-button-secondary:hover {
    background-color: #0E173B;
    transform: scale(1.05);
  }
  
  .menu-icon {
    color: white;
  }
  
  .mobile-menu-bg {
    background-color: rgba(0, 0, 0, 0.95);
  }
  
  .nav-link-mobile {
    color: white;
  }
  
  .nav-link-mobile:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .cta-button-mobile-primary {
    background-color: #1991B9;
    color: white;
  }
  
  .cta-button-mobile-secondary {
    background-color: #111D4A;
    color: white;
  }
  
  /* Scrolled state - white background with dark text */
  #main-header.scrolled {
    background-color: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  #main-header.scrolled .nav-link {
    color: #111827;
  }
  
  #main-header.scrolled .nav-link:hover {
    color: #1991B9;
  }
  
  /* Scrolled state - buttons stay the same color */
  #main-header.scrolled .cta-button-primary {
    background-color: #1991B9;
    color: white;
  }
  
  #main-header.scrolled .cta-button-primary:hover {
    background-color: #147494;
  }
  
  #main-header.scrolled .cta-button-secondary {
    background-color: #111D4A;
    color: white;
  }
  
  #main-header.scrolled .cta-button-secondary:hover {
    background-color: #0E173B;
  }
  
  #main-header.scrolled .menu-icon {
    color: #111827;
  }
  
  #main-header.scrolled .mobile-menu-bg {
    background-color: rgba(255, 255, 255, 0.98);
  }
  
  #main-header.scrolled .nav-link-mobile {
    color: #111827;
  }
  
  #main-header.scrolled .nav-link-mobile:hover {
    background-color: rgba(25, 145, 185, 0.1);
  }
  
  #main-header.scrolled .cta-button-mobile-primary {
    background-color: #1991B9;
    color: white;
  }
  
  #main-header.scrolled .cta-button-mobile-secondary {
    background-color: #111D4A;
    color: white;
  }
  
  /* Logo switching */
  #main-header.scrolled #logo-white {
    opacity: 0;
  }
  
  #main-header.scrolled #logo-color {
    opacity: 1;
  }
</style>

<script>
  // Handle scroll behavior
  function handleScroll() {
    const header = document.getElementById('main-header');
    if (!header) return;
    
    if (window.scrollY > 50) {
      header.classList.add('scrolled');
    } else {
      header.classList.remove('scrolled');
    }
  }
  
  // Handle mobile menu toggle
  function setupMobileMenu() {
    const button = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');
    
    if (!button || !menu) return;
    
    button.addEventListener('click', () => {
      menu.classList.toggle('hidden');
    });
    
    // Handle submenu toggles
    const submenuToggles = menu.querySelectorAll('.mobile-submenu-toggle');
    submenuToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const submenuId = toggle.getAttribute('data-submenu');
        const submenu = document.getElementById(submenuId);
        const arrow = toggle.querySelector('.submenu-arrow');
        
        if (submenu && arrow) {
          submenu.classList.toggle('hidden');
          arrow.classList.toggle('rotate-180');
        }
      });
    });
    
    // Close menu when clicking a link
    const links = menu.querySelectorAll('a');
    links.forEach(link => {
      link.addEventListener('click', () => {
        menu.classList.add('hidden');
      });
    });
  }
  
  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    handleScroll();
    setupMobileMenu();
  });
  
  // Listen to scroll
  window.addEventListener('scroll', handleScroll);
  
  // For Astro page transitions
  document.addEventListener('astro:page-load', () => {
    handleScroll();
    setupMobileMenu();
  });
</script>
